generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  phone             String?   @unique
  image             String?
  emailVerified     DateTime? @map("email_verified")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
  sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation(name: "ToUserRelation")
  accounts          Account[]
  // sessions          Session[]
}
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  password_hash     String? 
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  id_token          String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model p2pTransfer {
  id         String    @id @default(cuid())
  amount     Int
  timestamp  DateTime
  fromUserId String
  fromUser   User         @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   String
  toUser     User         @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
}

 

model Merchant {
  id        String    @id @default(cuid())
  email     String   @unique
  name      String?
  auth_type AuthType
}

enum TransactionType {
  CREDIT   
  DEBIT   
}

model OnRampTransaction {
  id        String    @id @default(cuid())
  status    OnRampStatus
  token     String          @unique
  provider  String
  amount    Int
  type      TransactionType @default(CREDIT)  
  startTime DateTime
  userId    String
  user      User            @relation(fields: [userId], references: [id])
}


model Balance {
  id     String    @id @default(cuid())
  userId String  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}
